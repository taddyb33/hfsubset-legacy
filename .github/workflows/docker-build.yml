on:
  push:
    branches: 
      - main
      - development
  pull_request:
    branches: 
      - main
      - development
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic version (x.y.z)'
        required: true
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: get_version
        run: |
          VERSION=$(cat VERSION || echo "1.0.0")
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ steps.get_version.outputs.CURRENT_VERSION }}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Increment minor version for main branch
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            # Increment patch version for development branch
            PATCH=$((PATCH + 1))
          fi
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo $NEW_VERSION > VERSION

      - name: Set final version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.increment_version.outputs.NEW_VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.set_version.outputs.VERSION }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile.hfsubset  # Specify the correct Dockerfile name here
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Commit version update
        if: github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "Bump version to ${{ steps.set_version.outputs.VERSION }}"
          git push